generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  username              String    @db.VarChar(50)
  email                 String?   @db.VarChar(255)
  phone                 String    @db.VarChar(20)
  passwordHash          String    @map("password_hash") @db.VarChar(255)
  tenantId              String?   @map("tenant_id")
  role                  Role
  isActive              Boolean   @default(true) @map("is_active")
  isEmailVerified       Boolean   @default(false) @map("is_email_verified")
  isPhoneVerified       Boolean   @default(false) @map("is_phone_verified")
  emailVerifiedAt       DateTime? @map("email_verified_at")
  phoneVerifiedAt       DateTime? @map("phone_verified_at")
  lastLoginAt           DateTime? @map("last_login_at")
  passwordChangedAt     DateTime? @map("password_changed_at")
  failedLoginAttempts   Int       @default(0) @map("failed_login_attempts")
  lockedUntil           DateTime? @map("locked_until")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  passwordHistory       PasswordHistory[]
  refreshTokens         RefreshToken[]  // Renamed for clarity
  otps                  Otp[]           // Added relation

  @@unique([username, tenantId])
  @@map("users")
}

model PasswordHistory {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  passwordHash String   @map("password_hash") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

model RefreshToken {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  value         String      @unique @map("token_value") @db.Text
  expiresAt     DateTime    @map("expires_at")
  isRevoked     Boolean     @default(false) @map("is_revoked")
  ipAddress     String?     @map("ip_address") @db.VarChar(45)
  userAgent     String?     @map("user_agent") @db.Text
  deviceType    DeviceType? @map("device_type")
  createdAt     DateTime    @default(now()) @map("created_at")
  lastUsedAt    DateTime?   @map("last_used_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Otp {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")  // Changed from username to userId
  value     String      @map("otp_code") @db.VarChar(6)
  purpose   OtpPurpose
  isUsed    Boolean     @default(false) @map("is_used")
  expiresAt DateTime    @map("expires_at")
  attempts  Int         @default(0)
  createdAt DateTime    @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum DeviceType {
  desktop
  mobile
  tablet
}

enum OtpPurpose {
  registration
  password_reset
}
